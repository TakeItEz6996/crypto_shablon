import json
import os
from contextlib import asynccontextmanager
from http import HTTPStatus
from dotenv import load_dotenv
from fastapi import FastAPI, Request, Response
from telegram import Update
from telegram.ext import Application, ContextTypes, CommandHandler, MessageHandler, filters

# Load environment variables
load_dotenv()
TELEGRAM_BOT_TOKEN: str = os.getenv('TELEGRAM_BOT_TOKEN')
WEBHOOK_DOMAIN: str = os.getenv('RAILWAY_PUBLIC_DOMAIN')

# Build the Telegram Bot application
bot_builder = (
    Application.builder()
    .token(TELEGRAM_BOT_TOKEN)
    .updater(None)
    .build()
)


@asynccontextmanager
async def lifespan(_: FastAPI):
    """ Sets the webhook for the Telegram Bot and manages its lifecycle (start/stop). """
    await bot_builder.bot.setWebhook(url=WEBHOOK_DOMAIN)
    async with bot_builder:
        await bot_builder.start()
        yield
        await bot_builder.stop()


app = FastAPI(lifespan=lifespan)


@app.post("/")
async def process_update(request: Request):
    """ Handles incoming Telegram updates and processes them with the bot. """
    message = await request.json()
    update = Update.de_json(data=message, bot=bot_builder.bot)
    await bot_builder.process_update(update)
    return Response(status_code=HTTPStatus.OK)


async def start(update: Update, _: ContextTypes.DEFAULT_TYPE) -> None:
    """ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start """
    reply = "–ü—Ä–∏–≤–µ—Ç, –±—Ä–∞—Ç üëã –Ø –≥–æ—Ç–æ–≤ –∫ –±–æ—é!\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" \
            "/–ø–æ—Ä—Ç—Ñ–µ–ª—å ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤—ã\n" \
            "/—Ä—ã–Ω–æ–∫ ‚Äî –∞–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏\n" \
            "/–Ω—Ñ—Ç ‚Äî NFT-–ø—É–ª—å—Å"
    await update.message.reply_text(reply)


async def portfolio(update: Update, _: ContextTypes.DEFAULT_TYPE) -> None:
    """ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π """
    try:
        with open("portfolio.json", "r") as f:
            data = json.load(f)

        reply = "üìä –ü–æ—Ä—Ç—Ñ–µ–ª—å:\n"
        for key, info in data.items():
            if key == "USDT":
                reply += f"USDT (Bybit): ${info['amount']} ‚Äî —Å—Ç–µ–π–∫–∏–Ω–≥ {info['staking']}%\n"
            elif key == "NFT":
                reply += f"NFT: üé¥ {info['name']} (–≤—Ö–æ–¥: {info['buy_floor_sol']} SOL)\n"
            else:
                reply += f"{key}: {info['amount']} ‚Äî –∫—É–ø–ª–µ–Ω–æ –Ω–∞ ${info['buy_usd']}\n"

        await update.message.reply_text(reply)
    except Exception as e:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è.")



async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text.lower()

    if text == "/–ø–æ—Ä—Ç—Ñ–µ–ª—å":
        reply = "üìä –ü–æ—Ä—Ç—Ñ–µ–ª—å: BTC, ETH, SOL, TON, USDT, NFT"
    elif text == "/—Ä—ã–Ω–æ–∫":
        reply = "üìà –†—ã–Ω–æ–∫ —Å—Ç–∞–±–∏–ª–µ–Ω. –ñ–¥—ë–º —Å–∏–≥–Ω–∞–ª –ø–æ TON –∏ SOL"
    elif text == "/–Ω—Ñ—Ç":
        reply = "üéØ NFT-–ø—É–ª—å—Å: VALA –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ. –°–ª–µ–¥–∏–º –∑–∞ Rogues Dead"
    else:
        reply = f"–ë—Ä–∞—Ç, –Ω–µ –ø–æ–Ω—è–ª üßê –ü–æ–ø—Ä–æ–±—É–π: /–ø–æ—Ä—Ç—Ñ–µ–ª—å, /—Ä—ã–Ω–æ–∫ –∏–ª–∏ /–Ω—Ñ—Ç"

    await update.message.reply_text(reply)



bot_builder.add_handler(CommandHandler(command="start", callback=start))
bot_builder.add_handler(CommandHandler("–ø–æ—Ä—Ç—Ñ–µ–ª—å", portfolio))
bot_builder.add_handler(MessageHandler(filters=filters.TEXT & ~filters.COMMAND, callback=echo))
